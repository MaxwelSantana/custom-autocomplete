click "cart"
click on the 3rd "hello" 5 times
click "chrome" in the context of "Pixel 3 XL"
click in the middle of the screen
double click on the 3rd "hello"
right click on the 3rd "hello"
middle click on the 3rd "hello"
long click on the 3rd "hello"
click using javascript on "hello"
click on "hello" using the mouse
click on image from stored value "Logo"
click on image from stored value "Logo" with less than "10" % discrepancy
click on the 6th element by image from stored value "logo" with less than "10" % discrepancy
generate unique email, then enter into "Email" and save as "newEmail"
generate unique name, then enter into "Name" and save as "generatedName"
generate from template "###-###-####", then enter into "Phone" and save as "generatedPhone"
generate from template "%*********************************", then enter into "Description" and save as "generatedDescription"
generate from template by string with escaped parameters "${nowDateTimeIso}-**********", then enter into "Data" and save as "generatedData"
generate from template "$******************************@testrigor-mail.com", then enter into "Email" and save as "newEmail"
generate from regex text starting from next line and ending with [END]
[a-z0-9]{18}
line2[END], then enter into "JumboInput" and save as "JumboInput"
generate from template "%$$$$$$$$$$", then enter and save as "generatedName"
generate from regex "[A-Z][a-z]{30}", and save as "generatedName"
enter stored value "actionNotes" into 3rd "Notes"
enter "1" into "my_checkbox"
enter enter into "Notes"
enter text starting from next line and ending with [END]
line1
line2[END] into "Notes"
select "code or value" from "MySelect"
click on "Notes"
type "This is a test."
click on "Notes"
type text starting from next line and ending with [END]
line1
line2
line3[END]
check that page contains stored value from "actionNotes"
check that page contains "Hello"
check that page didn\'t change compared to the previous step
check that page didn\'t change
check that "element" contains stored value from "actionNotes"
check that "payout" contains "1000.00"
check that button "Add to Cart" is disabled
check that stored value "createdName" itself contains "James"
compare image of "my_div" to previous version with allowance of "5%"
check that sms to "+12345678902" matches regex "Code\\:\\d\\d\\d\\d" and save it as "sms"
check that file "instruction.pdf" was downloaded
check that downloaded file contains "app"
check that downloaded file "agreement.pdf" contains "agreement"
check that downloaded file "agreement.pdf" does not contain "liability"
check that file contains saved value "variableName"
long press on the 3rd "element"
hover over 3rd "element"
open new tab
switch to tab "3"
switch to tab "popup"
close tab
go back
go forward
reload
reset to home
drag "element1" to "element2"
drag file "<URL>" onto "element"
drag file from saved value "File to upload" onto "element"
drag "canvas1" with offset "0,0" to "canvas1" with offset "50,50"
drag folder from saved value "Zipped Folder" onto "element"
scroll down
scroll down on "right_panel"
scroll down by 1/2 of the screen
scroll down until page contains "Submit"
scroll down until page contains link exactly "Contact Us"
swipe right
wait 3 sec
call api "https://testrigor.ai/api" and save it as "result"
call api post "http://dummy.restapiexample.com/api/v1/create" with headers "Content-Type:application/json" and "Accept:application/json" and body "{\\"name\\":\\"James\\",\\"salary\\":\\"123\\",\\"age\\":\\"32\\"}" and get "$.data.name" and save it as "createdName"

check that stored value "createdName" itself contains "James"
grab value from "element" and save it as "variableName"
UserName:53vhhsw1fi@testrigor-mail.com
grab value of "(?<=UserName\\:)[^ ]+" and save it as "generatedUsername"
grab value of "(?<=UserName\\:)[^ ]+" from "generated_section" and save it as "generatedUsername"
extract value by regex "regex" from saved value "variableNameFrom" and save it as "variableNameTo"
var1
UserName:53vhhsw1fi@testrigor-mail.com
extract value by regex "(?<=UserName\\:)[^ ]+" from "var1" and save it as "generatedUsername"
save value "Peter" as "name"
store clipboard value as "variable"
open url "https://testrigor.ai?d=\\"
grab url and save it as "variableName"
send email to "user@customer.com" with  subject "Test message" and  body "Hi, this is a test, this is just a test message."
send email from "sender@customer.com" to "recipient@customer.com" with  subject "Test message", and  body "Hi, this is a test, this is just a test message.", and attachment from saved value "Sample File"
send email from "sender@customer.com" to "recipient@customer.com" with  subject "Test message", and  body "Hi, this is a test, this is just a test message.", and attachment "http://online.com/file/name.pdf"
check that email from "user@customer.com" is delivered
check that email to saved value "newEmail" was received
and show in mobile
check that email to "user@customer.com" and "Confirm" in subject was received and show in mobile
check that email from "user@customer.com" to saved value "newEmail" was received
check that email to "user@customer.com" and "Confirm" in subject was received
check that two emails to "user@customer.com" and "Confirm" in subject were delivered
check that one or more emails to "user@customer.com" and "Confirm" in subject were delivered
check that email to "user@customer.com" and "Confirm" in subject was received
to
check that email to
reply to email from "user@customer.com" with "confirmed"
reply to email to saved value "newEmail" with "confirmed"
reply to email to saved value "newEmail" from "user@customer.com" and subject "Confirm" with "confirmed"
reply to email to saved value "newEmail" and subject "<regular expression>" with "confirmed"
call "+15344297154" and check it was picked up
call "+15344297154"
sms to +15344297154 with body "hello"
message +15344297154 with body "hi from testRigor" and verify it was delivered
set geo location "40.7128,74.0060"
start browser "User 2"
start browser "User 2" and switch
start device "User 2"
switch to browser "User 2"
switch to device "User 2"
switch to browser "default"
compare inputs
compare texts
compare buttons
compare image of "my_div" to previous version with allowance of "5%"
image of text "pressed"
image of 3rd "peter"
compare image of "logo" to file "https://testrigor.com/assets/images/logo.png" with allowance of "5%"
compare image of "logo" to stored value "logoFile" with allowance of "5%"
login
login
click "Men Clothing"
scroll down
click "Men\'s cargo shorts"
click "brown"
click "Size 34"
click "Add to cart"
check that page contains "Your order is nearly complete!"

go to checkout page
check page contains "Add to cart"

check that "peter" color is "ffaabb"
check that second "peter" color is "ffaabb"
check that input "peter" color is "ffaabb"
check that second input "peter" color is "ffaabb"
check that stored value "peter" color is "ffaabb"
check that "peter" or "john" color is "ffaabb"
click on "cart"
check that "peter" contains stored value "actionNote"
click "checkout" or "submit"
click "checkout" or "submit" if exists
click on button "Delete" below "Actions"
to the left of
to the right of
above
below
on the right top of
on the left top of
on the right bottom of
on the left bottom of
near
click on button "Delete" below "Section Name" to the right of "label"
completely
with at least "10" percent overlap
roughly
enter "Peter" into roughly below "Section"
enter "Peter" into element with at least "1" percent overlap on the right of "Description"
enter "Peter" into below "Section" on the right of "Description"
enter "Peter" into roughly below "Section" completely on the right of "Description"
click on "Delete" within the context of table "actions" at row containing "id1" and column "Actions"
click on "Delete" within the context of "sectionTwo" below "Actions" and to the right of "rowName"
click on "Button" below "Title" in the context of "sectionOne"
click on "Button" below "Title" and to the right of "leftHeader" in the context of "sectionTwo"
click on "Button" below "Subtitle" and to the right of "leftHeader" in the context of "sectionOne" below "Title" and above "Second Title"
click on strictly button "Delete"
click on exactly "Delete"
click on strictly button exactly "Delete"
click deepest element "Delete"
click on "Delete" with offset "20,10"
click in the middle of the screen
in the middle of the screen
in the top quarter of the screen
in the second top quarter of the screen
in the bottom quarter of the screen
in the second bottom quarter of the screen
in the top third of the screen
in the bottom third of the screen
in the left quarter of the screen
in the second left quarter of the screen
in the right quarter of the screen
in the second right quarter of the screen
in the left third of the screen
in the right third of the screen
in the left side of the screen
in the right side of the screen
in the top of the screen
in the bottom of the screen
on the left edge of the screen
on the right edge of the screen
on the top edge of the screen
on the bottom edge of the screen
in the left top corner of the screen
in the right top corner of the screen
in the left bottom corner of the screen
in the right bottom corner of the screen
generate from regex "[a-z]{10,18}", then enter into "Notes" and save as "actionNotes"
validate that stored value "actionNotes" color is "ffaabb"
check that "peter" contains stored value "actionNote"
click on stored value "actionNotes"
check that page contains stored value from "actionNotes"
"username"
"password"
enter stored value "username" into "username_field"
enter stored value "password" into "password_field"
login
enter from the string with parameters "${homePrefix}/my/path" into "urlPath"
check that expression "${a} + ${b}" itself is equal as a number to "42"
check that page contains expression "new Date().setDate(today.getDate()-30).getFullYear()"
grab value from "some-element" and save it as "my-email"
grab value from input "some-edit" and save it as "my-email"
generate from regex "[a-z]{10,18}" and save as "actionNotes"
save value "Peter" as "name"
click on the 6th element by image from stored
value "logo" with less than "10" % discrepancy
click "Next" until page contains stored value "previously generated id"
click "Next" up to 12 times until page contains strictly button "Place order"
check that "my_div" contains "error"
check that "element" color is "ffaabb"
check that input "input" has value "value"
check that checkbox "Keep me signed in" is checked
check that checkbox "Keep me signed in" is not checked
check that input "input" has value ""
check that property "background-color" of "my-div" is equal to "black"
itself
call api "https://testrigor.com" and save it as "variableName"
check that stored value "variableName" itself contains "James"
itself
check that page contains "error message"
check that url matches regex from the string with parameters "${homePrefix}/product/${type}/[0-9A-Za-z\\-]+"
click on table "actions" at row "103" and column "Action"
click on table "actions" at row containing "spk2" and column "Actions"
click on "Ignore" within the context of table "actions" at row containing "spk2" and column "Actions"
enter "york1" into first table at the second header row and column "Id"
check that table "actions" at row "102" and column "Name" contains "Spock"
check that table "actions" at row "101" and column "Additional Data" has value "Looks like a trap"
enter "This is a trap!" into table "actions" at row "101" and column "Additional Data"
click "Open channel" within the context of second table at row "103" and column "Action"
check that the second table at row containing "Nyota" and column "Action" contains link "Open channel"
click the first button within the context of second table at row containing "Nyota" and column "Action"
if exists
click "element" if exists
enter "bla" into "element" if exists
fail
fail with "error"
call api <TYPE> "<API_URL>" with headers "a:a" and "b:b" and body "body" and get "JsonPath" and save it as "variableName"
call api post "http://dummy.restapiexample.com/api/v1/create" with headers "Content-Type:application/json" and "Accept:application/json" and body "{\\"name\\":\\"James\\",\\"salary\\":\\"123\\",\\"age\\":\\"32\\"}" and get "$.data.name" and save it as "createdName"  and then check that http code is 200
"JsonPath"
"variableName"
"JsonPath"
"variableName"
call api "api" and save it as "variableName"
with headers "a:a" and "b:b"
and body "{\\"name\\":\\"James\\",\\"salary\\":\\"123\\",\\"age\\":\\"32\\"}"
call api post from the string with parameters "${homePrefix}/api/v1/create" with headers "Content-Type:application/json" and "Accept:application/json" and body text starting from next line and ending with [END]
{
  "param": "value",
  "param2": "value2"
}
[END] and get "$.data.name" and save it as "createdName"
call api post from the string with parameters "${homePrefix}/api/v1/create" with headers "Content-Type:application/json" and "Accept:application/json" and body from the string with parameters text starting from next line and ending with [END]
{
  "param": "value",
  "param2": "${dynamicValue}"
}
[END] and get "$.data.name" and save it as "createdName"
check that stored value "createdName" itself contains "James"
enter stored value "keyName" into input file "fileField"
enter "<FILE_URL>" into file input "fileField"
<input type="file" ...
upload file from saved value "sampleFile"
upload file "https://some-page.com/path-to-file" to mobile device

Downloads
enter from the string with parameters text starting from next line and ending with [END]
${file_var_one}
<FILE_URL>
[END] into file input "myFileInput"
webkitdirectory
<input type="file" webkitdirectory ...
some value, ${variable1}, another value
${variable2}, fixed value, ${variable3}
enter template stored value "keyName" into input file "fileField"
enter template "<FILE_URL>" into file input "fileField"
call "+15344297154" and validate it was picked up
make call to "+15344297154" and check it was answered
call to +15344297154
call "+15344297154" and check it was completed
call "+15344297154" from "+15551234567" and verify it is ringing
check that phone call from "+15344297154" is ringing
check that phone call from "+15344297154" was answered
call from stored value "allocatedNumber" to stored value "answerPhoneNumber"

sms "+15344297154" with body "this is content" and validate it was sent
send sms to "+15344297154" with content "this is content"
send message to "+15344297154" with text "this is content" and check it was delivered
send message from +15551234567 to "+15344297154" with text "this is content" and check it was failed
message from +15551234567 to "+15344297154" with body "this is content" and check it was not delivered
check that sms from "+12345678901" to "+12345678902" contains "Code" and matches regex "Code\\:\\d\\d\\d\\d" and save it as "sms"
extract value
check that sms to "+12345678902" matches regex "Code\\:\\d\\d\\d\\d" and save it as "sms"
extract value by regex "(?<=Code\\:)[0-9]{4}" from "sms" and save it as "confirmationCode"
send sms from stored value "allocatedNumber" to stored value "answerPhoneNumber" with content from string with parameters starting from next line and ending with <END>
${answerCode} b
<END>
allocate a temporary number and save it as "newNumber"
click "Sign in"
enter "jacob" into "Username"
enter "jacobs-secure-password" into "Password"
click "Verify me"
check that sms to "+12345678902" is delivered and matches regex "Code\\:\\d\\d\\d\\d" and save it as "sms"
extract value by regex "(?<=Code\\:)[0-9]{4}" from "sms" and save it as "confirmationCode"
enter saved value "confirmationCode" into "code"
click "Continue to Login"
check that page contains text "Welcome, Jacob!"
login
enter stored value "username" into "email"
enter stored value "password" into "password"
click "Log In"
send email to "user@customer.com" with subject "Test message" and  body "Hi, this is a test, this is just a test message."

check that email from "user@customer.com" is delivered
send email from "sender@customer.com" to "recipient@customer.com" with  subject "Test message", and  body "Hi, this is a test, this is just a test message.", and attachment from saved value "Sample File"
send email from "sender@customer.com" to "recipient@customer.com" with  subject "Test message", and  body "Hi, this is a test, this is just a test message.", and attachment "http://online.com/file/name.pdf"
check that email to "random-user@testrigor-mail.com" from "user@customer.com" is delivered
check that two emails to "user@customer.com" and "Confirm" in subject were delivered
check that one or more emails to "user@customer.com" and "Confirm" in subject were delivered
check that email to saved value "newEmail" was received
check that email to saved value "newEmail" from "admin@customer.com" and "Confirm" in subject was received
check that email to saved value "newEmail" and "<regular expression>" in subject was received
check that email to "user@customer.com" and "Confirm" in subject was received and show in mobile
check that email to "random-user@testrigor-mail.com" from "user@customer.com" was not delivered
check that one or more emails to saved value "random-user@testrigor-mail.com" were received
<random-user>@testrigor-mail.com
<random-user>
wait 2 minutes
switch to tab "1"
switch to tab "2"
send email to saved value "newEmail" and saved value "newEmail2" with subject "Test" and body "Hi"
set cookie "cookie value" as "cookie-name"
set cookie from saved value "variableName" as "cookie-name"
get cookie "cookie-name" and save it as "variableName"
clear cookies
set item "item-data" in sessionstorage as "item-name"
get item "item-name" from session storage and save it as "varName"
clear sessionstorage
set item "item-data" in localstorage as "item-name"
get item "item-name" from local storage and save it as "varName"
clear localstorage
set user agent to "My User Agent"
unset user agent
//
click "my-cryptic-button" // actually clicks "add to cart"
record audio through 10 seconds after clicking "audio-trigger" and save as "my-recording"
record audio from "my-audio-tag" through 20 seconds after clicking "audio-trigger" and save as "my-specific-recording"
check that audio from "my-recording" is "70%" similar to "my-specific-recording"
check that audio from "my-recording" is "85%" similar to "https://some-page.com/path-to-file"
check that audio from "my-recording" is "99%" similar to "my-specific-recording"
check that audio from "my-recording" is "1%" different to "my-specific-recording"
play audio "https://some-page.com/path-to-file"
play audio "test-data-ref"
play audio "sound-to-play-ref" after clicking "start-recording" then click "stop-recording"
run sql query "select top 1 UserID, LastName, FirstName from Users;"
enter stored value  "FirstName" into "First name"
check that stored value "LastName" itself contains "Doe"
run sql query "insert into Users(UserID, FirstName, LastName) values (3, \'Jon\', \'Doe\');"